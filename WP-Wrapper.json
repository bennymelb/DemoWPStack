{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Demo wordpress Stack",
    "Parameters": {
        "Environment": {
            "Description": "Indicate this is a Dev/QA/Staging/Prod environment",
            "Type": "String",
            "Default": "Dev",
            "AllowedValues": [
                "Dev",
                "QA",
                "Staging",
                "Prod"
            ],
            "ConstraintDescription": "Environment value must be either Dev, QA, Staging or Prod"
        },
        "ServiceName": {
            "Description": "Name of the service thats going to run in this VPC",
            "Type": "String",
            "Default": "Demo"
        },
        "NetworkStackName": {
            "Description": "Name of the CF stack that contains the network info",
            "Type": "String",
            "MinLength" : 1,
            "MaxLength" : 255,
            "AllowedPattern" : "^[a-zA-Z][-a-zA-Z0-9]*$",            
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
        },
        "CFTemplateBucket":{
            "Description": "Name of the bucket that contain the frontend & backend CF template",
            "Type": "String"
        },
        "FrontEndTemplate": {
            "Description": "Name of the frontend template in the bucket, if its inside a subfolder you need to specify the path like folder/template.json",
            "Type": "String"
        },
        "BackEndTemplate": {
            "Description": "Name of the backend template in the bucket, if its inside a subfolder you need to specify the path like folder/template.json",
            "Type": "String"
        },
        "AppBucket": {
            "Description": "Name of the S3 bucket that contain your app artifact",
            "Type": "String",
            "MinLength" : 6,
            "MaxLength" : 63,
            "AllowedPattern" : "^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d\\.]$",
            "ConstraintDescription" : "A Bucket's name must be between 6 and 63 characters long, containing lowercase characters, numbers, periods, and dashes. It must start with a lowercase letter or number. Bucket names cannot contain underscores, end with a dash, have consecutive periods, or use dashes adjacent to periods"
        },
        "App": {
            "Description": "Name of the application software package e.g. sampleapp.zip",
            "Type": "String",
            "MinLength": 1
        },
        "ASGMinSize" : {
            "Description": "ASG Min size",
            "Type" : "String",
            "Default": "2"
        },
        "ASGMaxSize" : {
            "Description": "ASG Max size",
            "Type" :"String",
            "Default": "4"
        },
        "InstanceType": {
            "Description" : "EC2 instance type",
            "Type" : "String",
            "Default" : "t1.micro",
            "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
            "ConstraintDescription" : "Must be a valid EC2 instance type."
        },
        "EC2KeyPair": {
            "Description": "EC2 Key pair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "EC2IAMRole": {
            "Description": "IAM role for the EC2 instance",
            "Type": "String"
        },
        "DBSnapShot": {
            "Description": "(Optional) The Name of the RDS snapshot you wanted to restore the RDS from",
            "Type": "String"
        },
        "DBRootUserName": {
            "Description": "The master username of RDS",
            "Type": "String",
            "Default": "root",
            "MinLength": 4,
            "MaxLength": 20,
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
        },
        "DBRootPassword": {
            "Description": "The root password of the RDS",
            "Type": "String",
            "NoEcho": "true",
            "MinLength": 6,
            "MaxLength": 30
        },
        "DBName": {
            "Description": "The name of the database",
            "Type": "String",
            "MinLength": 4
        },
        "DBPort": {
            "Description": "The port number for the RDS instance",
            "Type": "String",
            "Default": "3306"
        },        
        "DBInstanceClass": {
            "Description": "RDS Instance size",
            "Type": "String",
            "Default": "db.t2.small",
            "AllowedValues" : [ "db.t2.small", "db.t2.medium", "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge" ],
            "ConstraintDescription" : "Must be a valid Aurora RDS instance type."
        },
        "BackupRetentionPeriod": {
            "Description": "The backup retention period",
            "Type": "Number",
            "Default": 7,
            "AllowedValues": [ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]
        },
        "AlertSNSTopic": {
            "Description": "The ARN of the SNS Topic for any EB alert",
            "Type": "String"
        },
        "AUTHKEY": {
            "Description": "AUTH_KEY",
            "Type":"String"
        },
        "AUTHSALT": {
            "Description": "AUTH_SALT",
            "Type":"String"
        },
        "LOGGEDINKEY": {
            "Description": "LOGGED_IN_KEY",
            "Type":"String"
        },
        "LOGGEDINSALT": {
            "Description": "LOGGED_IN_SALT",
            "Type":"String"
        },
        "NONCEKEY": {
            "Description": "NONCE_KEY",
            "Type":"String"
        },
        "NONCESALT": {
            "Description": "NONCE_SALT",
            "Type":"String"
        },
        "SECUREAUTHKEY": {
            "Description": "SECURE_AUTH_KEY",
            "Type":"String"
        },
        "SECUREAUTHSALT": {
            "Description": "SECURE_AUTH_SALT",
            "Type":"String"
        }     
    },
    "Metadata": {
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
                {
                    "Label" : { "default" : "Environment" },
                    "Parameters" : [ "Environment", "ServiceName" ]
                },
                {
                    "Label" : { "default": "Cloudformation template location" },
                    "Parameters" : [ "CFTemplateBucket", "FrontEndTemplate", "BackEndTemplate" ]
                },
                {
                    "Label" : { "default" : "Network Configuration" },
                    "Parameters" : [ "NetworkStackName" ]
                },
                {
                    "Label" : { "default" : "Application configuration" },
                    "Parameters" : [ "AppBucket" , "App" ]
                },
                {
                    "Label" : { "default" : "Auto scaling configuration" },
                    "Parameters" : [ "ASGMinSize" , "ASGMaxSize" ]
                },
                {
                    "Label" : { "default": "Instance configuration" },
                    "Parameters" : [ "InstanceType" , "EC2KeyPair", "EC2IAMRole" ]
                },
                {
                    "Label" : { "default" : "Database Configuration" },
                    "Parameters" : [ "DBInstanceClass", "DBSnapShot", "DBName", "DBPort", "DBRootUserName", "DBRootPassword", "BackupRetentionPeriod" ]
                },
                {
                    "Label" : { "default" : "Notification configuration" },
                    "Parameters" : [ "AlertSNSTopic" ]
                },
                {
                    "Label" : { "default" : "PHP Environment Variable" },
                    "Parameters" : [ "AUTHKEY", "AUTHSALT", "LOGGEDINKEY", "LOGGEDINSALT", "NONCEKEY", "NONCESALT", "SECUREAUTHKEY", "SECUREAUTHSALT" ]
                }
            ]
        }
    },
    "Conditions": {
        "UseRDSSnapShot":{
            "Fn::Not": [{"Fn::Equals": ["", {"Ref": "DBSnapShot"}]}]
        }
    },
    "Resources": {
        "EBSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription" : "Security group for EB instance",
                "VpcId" : { "Fn::ImportValue" :  { "Fn::Sub": "${NetworkStackName}-VPCID" } },
                "SecurityGroupIngress" : [
                    {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "210.11.132.138/32"}
                ],
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join": [ "", [ {"Ref": "ServiceName" }, " Elastic Beanstalk instsance Security Group", { "Ref": "Environment" } ]] } },
                    { "Key": "Env", "Value": { "Ref": "Environment" } }
                ]
            }
        },
        "RDSStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": { "Fn::Join": [ "", [ "https://s3-", {"Ref":"AWS::Region"}, ".amazonaws.com/", {"Ref":"CFTemplateBucket"}, "/", {"Ref":"BackEndTemplate"} ]] },
                "TimeoutInMinutes": "10",
                "Parameters": {
                    "Environment": {"Ref":"Environment"},
                    "ServiceName": {"Ref":"ServiceName"},
                    "NetworkStackName": {"Ref": "NetworkStackName"},
                    "EBSG": {"Ref":"EBSG"},
                    "DBSnapShot": {"Ref":"DBSnapShot"},
                    "DBRootUserName": {"Ref":"DBRootUserName"},
                    "DBRootPassword": {"Ref":"DBRootPassword"},
                    "DBName": {"Ref":"DBName"},
                    "DBInstanceClass": {"Ref":"DBInstanceClass"},
                    "BackupRetentionPeriod": {"Ref":"BackupRetentionPeriod"}
                }
            }
        },
        "EBStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL": { "Fn::Join": [ "", [ "https://s3-", {"Ref":"AWS::Region"}, ".amazonaws.com/", {"Ref":"CFTemplateBucket"}, "/", {"Ref":"FrontEndTemplate"} ]] },
                "TimeoutInMinutes": "10",
                "Parameters": {
                    "Environment": {"Ref":"Environment"},
                    "ServiceName": {"Ref":"ServiceName"},
                    "NetworkStackName": {"Ref": "NetworkStackName"},
                    "EBSG": {"Ref":"EBSG"},
                    "AppBucket": {"Ref": "AppBucket"},
                    "App": {"Ref": "App"},
                    "ASGMinSize": {"Ref": "ASGMinSize"},
                    "ASGMaxSize": {"Ref": "ASGMaxSize"},
                    "InstanceType": {"Ref": "InstanceType"},
                    "EC2KeyPair": {"Ref": "EC2KeyPair"},
                    "EC2IAMRole": {"Ref": "EC2IAMRole"},
                    "RDSEndPoint": { "Fn::GetAtt" : [ "RDSStack", "Outputs.StackRDSEndPoint" ] },
                    "RDSPort": {"Ref": "DBPort"},
                    "DBName": {"Ref":"DBName"},
                    "DBUsername": {"Ref":"DBRootUserName"},
                    "DBPassword": {"Ref":"DBRootPassword"},
                    "AlertSNSTopic": {"Ref": "AlertSNSTopic"},
                    "AUTHKEY": {"Ref": "AUTHKEY"},
                    "AUTHSALT": {"Ref": "AUTHSALT"},
                    "LOGGEDINKEY": {"Ref": "LOGGEDINKEY"},
                    "LOGGEDINSALT": {"Ref": "LOGGEDINSALT"},
                    "NONCEKEY": {"Ref": "NONCEKEY"},
                    "NONCESALT": {"Ref": "NONCESALT"},
                    "SECUREAUTHKEY": {"Ref": "SECUREAUTHKEY"},
                    "SECUREAUTHSALT": {"Ref": "SECUREAUTHSALT"}
                }
            }
        }        
    },
    "Outputs": {
        "StackName": {
            "Description": "The name of the stack",
            "Value": {"Ref": "AWS::StackName" },
            "Export": {
                "Name": {"Ref": "AWS::StackName" }
            }
        },
        "StackId": {
            "Description": "The ID of the stack",
            "Value": {"Ref": "AWS::StackId" }            
        },
        "StackEBEndPoint": {
            "Description" : "The URL of the Elastic Beanstalk environment",
            "Value" : { "Fn::GetAtt" : [ "EBStack", "Outputs.StackEBEndpoint" ] },
            "Export" : {
                "Name" : {"Fn::Sub": "${AWS::StackName}-EBEndpoint" }
            }
        }
    }
}